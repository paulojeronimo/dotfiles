#!/usr/bin/env bash
set -eou pipefail

BASEDIR=`cd "$(dirname "$0")"; pwd`
OP=${OP:-`basename "$0"`}

# Dot files (and other dirs/files) included in this repo, excluding some not necessary files.
DOTFILES='find "$DOTFILES_HOME"/ -maxdepth 1 ! \( -wholename "$DOTFILES_HOME"/ -o -name .git -o -name README.\* -o -name install -o -name remove -o -name .gitmodules \)'
DOTFILES_FILE=~/.dotfiles

sed_i() {
   case `uname` in
      Darwin) unset -f sed; sed -i "" "$@";;
      *) sed -i "$@";;
   esac
}

_dotstart_op() {
   local readonly mark='# Load startup environment for this machine'
   local op=$1
   local profile=~/.bash_profile
   case `uname` in
      Linux|CYGWIN*) profile=~/.bashrc;;
   esac

   [ -f $profile ] || touch $profile
   $1 $profile "$mark"
}

# Insert code on $profile to load $DOTFILES_FILE file
dotstart_install() {
   install() {
      local profile=$1
      local mark=$2
      if ! grep -q "^$mark" $profile
      then
         echo "Changing $profile to load $DOTFILES_FILE file ..."
         echo "$mark" >> $profile
         echo 'source ~/.dotfiles' >> $profile
      fi
   }
   _dotstart_op install
}

# Remove the code from $profile that loads $DOTFILES_FILE file
dotstart_uninstall() {
   uninstall() {
      local profile=$1
      local mark=$2

      sed_i "/^$mark/{N;d;}" $profile
   }
   _dotstart_op uninstall
}

# Do an operation at files specified by $DOTFILES
_dotfiles() {
   local f
   local t
   local op=$1

   for f in `eval $DOTFILES`
   do
      f=${f##*/}

      if [ -L "$DOTFILES_HOME/$f" ]
      then
         t=link
      elif [ -f "$DOTFILES_HOME/$f" ]
      then
         t=file
      elif [ -d "$DOTFILES_HOME/$f" ]
      then
         t=dir
      else
         continue
      fi

      $op $f $t
   done
}

# Install a file at ~/
_install() {
   local f=$1
   local t=$2

   case "$f" in
      .dotfiles|.gitignore)
      return
      ;;
   esac

   case $OSTYPE in
      cygwin)
         echo "Copying $t $DOTFILES_HOME/$f to ~/"
         cp -r "$DOTFILES_HOME/$f" ~/
      ;;
      *)
         echo "Linking $t $DOTFILES_HOME/$f to ~/$f"
         ln -sf "${DOTFILES_HOME##$HOME/}/$f" ~/
      ;;
   esac
}

# Remove a file from ~/
_remove() {
   local f=$1
   local t=$2

   echo "Unlinking $t ~/$f"
   case $OSTYPE in
      cygwin)
         rm -rf ~/$f
      ;;
      *)
         rm -f ~/$f
      ;;
   esac
}

# Init and update git sumodules
submodules_init() {
   pushd "$BASEDIR" &> /dev/null
   git submodule init
   git submodule update
   popd &> /dev/null
}

install_vim_plugins() {
   which vim &> /dev/null && {
      echo "Installing Vim plugins via Vundle (please wait) ..."
      # https://github.com/junegunn/vim-plug/issues/225#issuecomment-466044365
      vim +PluginInstall +qall &> /dev/null
   }
}

# Processing starts here ...
if [ "$OP" = "install" ]
then
   echo "Installing dotfiles ..."
   if ! [ "${DOTFILES_HOME:-}" ]
   then
      export DOTFILES_HOME=$BASEDIR
      submodules_init
      case $OSTYPE in
         cygwin)
            cp -r "$DOTFILES_HOME"/.dotfiles ~/
         ;;
         *) 
            ln -sf "${DOTFILES_HOME##$HOME/}/.dotfiles" ~/
         ;;
      esac
   fi

   dotstart_install
else
   echo "Removing dotfiles ..."
fi

if [ ! "${DOTFILES_HOME:-}" ]
then
   echo "DOTFILES_HOME variable must be configured to use this script! Nothing to do!"
   exit 1
fi

# do operation
_dotfiles _$OP

# pos-operations
if [ "$OP" = "install" ]
then 
   install_vim_plugins
   echo "Files installed! For effect, you need to restart your shell!"
   #case $OSTYPE in
   #   cygwin) $BASEDIR/.scripts/fixvim;;
   #esac
else
   dotstart_uninstall
   echo "Files removed! For effect, you need to restart your shell!";
fi
# vim: set ts=3 sw=3 expandtab:
