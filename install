#!/bin/bash
# Author: Paulo JerÃ´nimo (@paulojeronimo, pj@paulojeronimo.info)
# Useful script to operate my dotfiles (files starting with a "." and located at $HOME)
set +x

OP=`basename "$0"`

# Dot files (and other dirs/files) included in this repo, excluding some not necessary files.
DOTFILES='find "$DOTFILES_HOME"/ -maxdepth 1 ! \( -wholename "$DOTFILES_HOME"/ -o -name .git -o -name README.\* -o -name install -o -name remove \)'
DOTFILES_HOME_FILE=~/.dotfiles/home
DOTSTART_FILE=~/.`hostname -s`
DOTSTART_TEMPLATE_FILE=~/.dotfiles/dotstart

sed_i() {
   case `uname` in
      Darwin) sed -i "" "$@";;
      *) sed -i "$@";;
   esac
}

_dotstart_op() {
   local readonly mark='# Load startup environment for this machine'
   local op=$1
   local profile=~/.profile
   case `uname` in
      Linux|CYGWIN*) profile=~/.bashrc;;
   esac

   [ -f $profile ] || touch $profile
   $1 $profile "$mark"
}

# Insert code on .profile (or .bashrc) to load $DOTSTART_FILE file
dotstart_install() {
   install() {
      local profile=$1
      local mark=$2
      if ! grep -q "^$mark" $profile
      then
         echo "Changing $profile to load $DOTSTART_FILE file ..."
         echo -e "$mark" >> $profile
         echo -e "f=$DOTSTART_FILE; [ -f \"\$f\" ] && source \"\$f\"; unset f" >> $profile
      fi
   }
   _dotstart_op install
}

# Remove the code from .profile (or .bashrc) that loads $DOTSTART_FILE file
dotstart_uninstall() {
   uninstall() {
      local profile=$1
      local mark=$2

      sed_i "/^$mark/{N;d;}" $profile
   }
   _dotstart_op uninstall
}

# Do an operation at files specified by $DOTFILES
_dotfiles() {
   local f
   local t
   local op=$1
   
   for f in `eval $DOTFILES`
   do
      f=${f##*/}

      if [ -L "$DOTFILES_HOME/$f" ]
      then
         t=link
      elif [ -f "$DOTFILES_HOME/$f" ]
      then
         t=file
      elif [ -d "$DOTFILES_HOME/$f" ]
      then
         t=dir
      else
         continue
      fi

      # treat MACHINE dotfiles differently
      if [ "$MACHINES" ]
      then
         local is_machine
         local m

         is_machine=false
         for m in $MACHINES
         do
            if [ "$f" = ".$m" ]
            then
               is_machine=true
               break
            fi
         done

         if $is_machine && [ "$f" != ".`hostname -s`" ]
         then
            echo "Skipping $t $f"
            continue
         fi
      fi

      $op $f $t
   done
}

# Install a file at ~/
_install() {
   local f=$1
   local t=$2

   case "$f" in
      .dotfiles|.gitignore)
      echo "Skipping $t $f"
      return
      ;;
   esac

   echo "Linking $t $DOTFILES_HOME/$f to ~/$f"
   ln -s "${DOTFILES_HOME/$HOME\/}/$f" ~/
}

# Remove a file from ~/
_remove() {
   local f=$1
   local t=$2
   
   echo "Unlinking $t ~/$f"
   rm -f ~/$f
}

# Processing starts here ...
if [ "$OP" = "install" ]
then
   echo "Installing dotfiles ..."
   if ! [ "$DOTFILES_HOME" ]
   then
      DOTFILES_HOME=`cd "$(dirname "$0")"; echo -n $PWD`

      ln -s "${DOTFILES_HOME/$HOME\/}/.dotfiles" ~/
      echo "Writing $DOTFILES_HOME_FILE with the following content:"
      echo "export DOTFILES_HOME=\"$DOTFILES_HOME\"" | tee $DOTFILES_HOME_FILE
   fi

   dotstart_install

   f="$DOTFILES_HOME/.dotfiles/machines"
   if [ -f "$f" ]
   then
      MACHINES=`cat "$f" | tr '\n' ' '`
   fi
else
   echo "Removing dotfiles ..."
fi

if [ ! "$DOTFILES_HOME" ]
then
   echo "DOTFILES_HOME variable must be configured to use this script! Nothing to do!"
   exit 1
fi

# do operation
_dotfiles _$OP

# pos-operations
if [ "$OP" = "install" ]
then 
   if [ -f "$DOTSTART_FILE" ]
   then
      BACKUP="$DOTSTART_FILE".`date "+%Y%m%d-%H%M%S"`
      echo "File \"$DOTSTART_FILE\" exists! Moving it to \"$BACKUP\"!"
      mv "$DOTSTART_FILE" "$BACKUP"
   else
      echo "File \"$DOTSTART_FILE\" does not exists! Creating it from \"$DOTSTART_TEMPLATE_FILE\"!"
   fi
   sed "s,DOTSTART_FILE,$DOTSTART_FILE,g" $DOTSTART_TEMPLATE_FILE > $DOTSTART_FILE
   echo "Files installed! For effect, you need to restart your shell!"
else
   dotstart_uninstall
   echo "Files removed! For effect, you need to restart your shell!";
fi

# vim: set ts=3 sw=3 expandtab:
