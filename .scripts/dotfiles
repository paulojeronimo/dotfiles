#!/bin/bash
# Author: Paulo JerÃ´nimo (@paulojeronimo, pj@paulojeronimo.info)
# Useful script operate dotfiles (files starting with a "." and located at $HOME)

# Do an operation at files specified by $DOTFILES
_dotfiles() {
   local f
   local t
   local op=$1

   for f in `eval $DOTFILES`
   do
      f=${f##*/}

      if [ -L "$f" ]
      then
         t=link
      elif [ -f "$f" ]
      then
         t=file
      elif [ -d "$f" ]
      then
         t=dir
      else
         t=removed
      fi

      # treat MACHINE dotfiles differently
      if [ "$MACHINES" ]
      then
         local is_machine
         local m

         is_machine=false
         for m in $MACHINES
         do
            if [ "$f" = ".$m" ]
            then
               is_machine=true
               break
            fi
         done

         if $is_machine && [ "$f" != ".`hostname -s`" ]
         then
            echo "Skipping $t $f"
            continue
         fi
      fi

      $op $f $t
   done
}

# Show a file and its type (file or dir)
_list() {
   local f=$1
   local t=$2

   echo "$f ($t)"
}

# Install a file at ~/
_install() {
   local f=$1
   local t=$2

   case "$f" in
      .dotfiles|.gitignore)
      echo "Skipping $t $f"
      return
      ;;
   esac

   echo "Installing $t $f at ~/ from $DOTFILES_HOME"
   ln -s "$DOTFILES_HOME/$f" ~/
}

# Remove a file from ~/
_remove() {
   local f=$1
   local t=$2
   
   echo "Removing $t ~/$f"
   rm -rf ~/$f
}

# Dot files (and other dirs/files) included in this repo, excluding some not necessary files.
DOTFILES='find $DOTFILES_HOME -maxdepth 1 ! \( -path $DOTFILES_HOME -o -wholename $DOTFILES_HOME -o -name .git -o -name README.\* -o -name install -o -name remove \)'

OP=$1
OPTS='list|install|remove'
DOTFILES_HOME_FILE=~/.dotfiles/home
DOTSTART_TEMPLATE_FILE=~/.dotfiles/dotstart

[ "$OP" ] || {
   echo "You must specify one of the options: $OPTS"
   exit 1
}
echo -n $OPTS | grep -w $OP > /dev/null || {
   echo "\"$OP\" is an invalid option!"
   echo "You must specify one of the options: $OPTS"
   exit 1
}

echo "Executing \"$OP\" operation:"

case $OP in
   dir) 
      echo "DOTFILES_HOME=$DOTFILES_HOME"
      exit 0
      ;;
   list|install|remove)
      # pre-operations
      if [ "$OP" = "install" ]
      then
         if ! [ "$DOTFILES_HOME" ]
         then
            DOTFILES_HOME=`cd $(dirname $0)/..; echo -n $PWD`

            #TODO: insert a fix here: if DOTFILES_HOME is a link, this script will not work!
            # solution: use a code to get the real path!
            # a link to read about that: 
            # http://stackoverflow.com/questions/1055671/how-can-i-get-the-behavior-of-gnus-readlink-f-on-a-mac
            ln -s "$DOTFILES_HOME/.dotfiles" ~/
            echo "Writing $DOTFILES_HOME_FILE with the following content:"
            echo "export DOTFILES_HOME=$DOTFILES_HOME" | tee $DOTFILES_HOME_FILE
         fi

         f="$DOTFILES_HOME/.my-functions"
         if [ -f "$f" ]
         then
            source "$f" && dotstart_install
         fi

         f="$DOTFILES_HOME/.dotfiles/machines"
         if [ -f "$f" ]
         then
            MACHINES=`cat $f | tr '\n' ' '`
         fi
      fi

      if [ ! "$DOTFILES_HOME" ]
      then
         echo "You must configure DOTFILES_HOME to use this script! Nothing to do!"
         exit 1
      fi

      # do operation
      _dotfiles _$OP

      # pos-operations
      if [ "$OP" = "install" ]
      then 
         if [ -f "$DOTSTART_FILE" ]
         then
            echo "File \"$DOTSTART_FILE\" exists! Using it!"
         else
            echo "File \"$DOTSTART_FILE\" does not exists! Creating it from \"$DOTSTART_TEMPLATE_FILE\"!"
            sed "s,DOTSTART_FILE,$DOTSTART_FILE,g" $DOTSTART_TEMPLATE_FILE > $DOTSTART_FILE
         fi
         echo "Files installed! For effect, you need to restart your shell!"
      fi

      if [ "$OP" = "remove" ]
      then
         echo "Files removed! For effect, you need to restart your shell!";
      fi
      ;;
esac
