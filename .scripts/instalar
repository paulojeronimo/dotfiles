#!/bin/bash
# Autor: Paulo Jerônimo (@paulojeronimo, pj@paulojeronimo.info)

source ~/.funcoes/diversas.sh || exit 1
source ~/.funcoes/$PLATAFORMA/diversas.sh || exit 1
source ~/.funcoes/ambiente.sh || exit 1
SAI_EM_FALHA=true

# Carrega o arquivo de configuração do ambiente
carrega_ambiente() {
   for f in "$AMBIENTE_HOME"/ambiente /etc/ambiente; do
      [ -r "$f" ] && break
   done

   if ! [ "$f" ]
   then
      falha "Nenhum arquivo de ambiente foi localizado!"
   else
      carregar_arquivo "$f"
   fi
}

# Baixa um arquivo de uma URL para o diretório $INSTALADORES_DIR.
#   Caso o parâmetro --arquivo não seja especificado baixa somente url, senão url/arquivo
baixa_arquivo() {
    local arquivo
    local url
    local url_completa

    while [ "$1" ]; do
        case "$1" in
            --url) shift; url="$1";;
            --url-completa) shift; url_completa=true;;
            --arquivo) shift; arquivo="$1";;
        esac
        shift
    done

    [ "$url" ] || falha "O valor para --url não foi informado!"
    [ "$arquivo" ] || falha "O valor para --arquivo não foi informado!"

    if [ ! "$url_completa" ]; then
        echo "Baixando $arquivo de $url"
        url="$url/$arquivo" 
    else
        echo "Baixando $url"
    fi

    (
        [ "$USA_PROXY" ] || { unset http_proxy; no_proxy=--no-proxy; }

        if [ "$USA_CURL" ]; then
            curl -sSL -C - -o "$INSTALADORES_DIR/$arquivo" "$url"
        else
            wget $no_proxy -O "$INSTALADORES_DIR/$arquivo" -c "$url"
        fi
    ) && ok || falha
}

# Auxiliar que ajusta os parâmetros de configuração para a instalação
verifica_opcs() {
    local opcs
    while [ "$1" ]; do
        case "$1" in
            --usa-proxy) USA_PROXY=$1;;
            --nao-usa-proxy) unset USA_PROXY;; 
            --usa-root) USA_ROOT=$1;;
            --nao-usa-root) unset USA_ROOT;;
            --usa-yum) USA_YUM=$1;;
            --nao-usa-yum) unset USA_YUM;;
            --usa-sudo) SUDO="sudo";;
            --nao-usa-sudo) unset SUDO;;
            --usa-curl) USA_CURL=$1;;
            --nao-usa-curl) unset USA_CURL;;
            --baixa-arquivo) BAIXA_ARQUIVO=$1;;
            --nao-baixa-arquivo) unset BAIXA_ARQUIVO;;
            --tipo) 
                opcs="$opcs $1"
                shift; [ "$1" ] || falha "Valor de --tipo não informado!"
                opcs="$opcs $1"
                TIPO_APP="$1"
                ;;
        esac
        shift
    done

    # se usa o yum, configura alguns parâmetros...
    [ "$USA_YUM" ] && {
       SUDO="sudo"
       unset BAIXA_ARQUIVO
    }

    # Opções default!
    opcs="$opcs ${USA_PROXY:---nao-usa-proxy}"
    opcs="$opcs ${USA_ROOT:---nao-usa-root}"
    opcs="$opcs ${USA_YUM:---nao-usa-yum}"
    opcs="$opcs ${USA_CURL:---nao-usa-curl}"
    opcs="$opcs ${BAIXA_ARQUIVO:---nao-baixa-arquivo}"

    echo "Opções:" $opcs
}

remove_aplicacao() {
    # remove o link anterior, caso exista
    [ -L "${!APP_LINK}" ] && {
        echo -n "Excluindo link simbólico existente (${!APP_LINK})... "
        rm "${!APP_LINK}" &> $OUT && ok || falha
    }

    # remove o diretório anterior, caso exista
    if [ -d "${!APP_DIR}" ]; then
        echo -n "Excluindo diretório de instalação existente (${!APP_DIR})... "
        rm -rf "${!APP_DIR}" &> $OUT && ok || falha
    fi
}

# Instala uma aplicação no diretório $FERRAMENTAS_DIR
# Antes disto, faz o download da mesma a partir de uma URL utilizando o baixa_arquivo
instala_aplicacao() {
    # se USA_YUM, simplesmente vai embora...
    [ "$USA_YUM" ] && return

    # link (que também é utilizado como nome curto da aplicação) é obrigatório
    verifica_var $APP_LINK

    _remove

    # extrai o conteúdo do instalador
    echo -n "Descompactando ${!APP_INSTALADOR} em ${!APP_DIR}... "
    extrai "$INSTALADORES_DIR/${!APP_INSTALADOR}" &> $OUT && ok || falha

    # se quem está instalando é o root
    [ "`id -u`" -eq 0 ] && {
        local usuario_da_aplicacao
        [ "${!APP_USUARIO}" ] && usuario_da_aplicacao=${!APP_USUARIO} || usuario_da_aplicacao=root

        echo -n "Ajustando o dono de ${!APP_DIR} para $usuario_da_aplicacao... "
        chown -R $usuario_da_aplicacao: ${!APP_DIR} &> $OUT && ok || falha
    }

    # se o diretório de instalação e o link não são a mesma coisa, cria o link
    [ "${!APP_DIR}" != "${!APP_LINK}" ] && {
        echo -n "Criando o link ${!APP_LINK} para ${!APP_DIR}... "
        ln -s ${!APP_DIR} ${!APP_LINK} &> $OUT && ok || falha
    } || true
}

# Função que carrega o ambiente de instalação/remoção de aplicações
# montando as variáveis da aplicação, verificando opções e pré-condições
prepara() {
    # monta as variáveis da aplicação
    APP=$(echo "$1" | tr [:lower:] [:upper:])
    APP_LOWER=$(echo "$1" | tr [:upper:] [:lower:]); shift
    APP_USUARIO=${APP}_USUARIO
    APP_INSTALADOR=${APP}_INSTALADOR
    APP_INSTALADOR_URL=${APP}_INSTALADOR_URL
    APP_INSTALADOR_URL_COMPLETA=${APP}_INSTALADOR_URL_COMPLETA
    APP_INSTALA_OPCS=${APP}_INSTALA_OPCS
    APP_DIR=${APP}_DIR
    APP_LINK=${APP}_LINK
    APP_PACOTE=${APP}_PACOTE

    # verifica quem chamou esta função para imprimir a informação correta
    local chamador=`caller 0 | cut -f 2 -d ' '`
    local operacao
    case $chamador in
        instala) operacao=Instalando;;
        remove) operacao=Removendo;;
        *) falha "Ooops! A função prepara não foi atualizada para ser chamada por $chamador";;
    esac

    # se a aplicação não foi informada, não há o que fazer...
    [ "$APP" ] || falha "Aplicação não informada!"

    # Imprime a operação que será executada
    echo "== $operacao $APP =="

    # carrega o arquivo de configuração do ambiente
    carrega_ambiente || falha

    # agrega as opções default, as opções da própria aplicação
    INSTALA_OPCS=`echo $INSTALA_OPCS ${!APP_INSTALA_OPCS} "$@"`

    # se existe o script $APP_LOWER.sh no diretório $FUNCOES_DIR/instalar
    # soma a opção "--tipo $APP_LOWER" ao INSTALA_OPCS
    [ -f "$FUNCOES_DIR/instalar/${APP_LOWER}.sh" ] && 
        INSTALA_OPCS="$INSTALA_OPCS --tipo $APP_LOWER"

    # verifica as opções passadas
    verifica_opcs $INSTALA_OPCS

    # carrega o script de instalação para uma aplicação, se o tipo da mesma for informado
    [ "$TIPO_APP" ] && {
      local nome_script="$FUNCOES_DIR/instalar/$TIPO_APP.sh"

      echo -n "Carregando script $nome_script... "
      source "$nome_script" &> $OUT && ok || falha
    }

    # se é para a aplicação ser instalada como root, verifica se o usuário é root
    [ "$USA_ROOT" ] && verifica_root

    if ! [ "$USA_YUM" ]; then
        # se o diretório de instalação da aplicação é absoluto, 
        # ajusta o valor da variável FERRAMENTAS_DIR e 
        # transforma APP_DIR em relativo
        absoluto ${!APP_DIR} && { 
            FERRAMENTAS_DIR=${!APP_DIR%/*}
            eval $APP_DIR=${!APP_DIR##*/}
            echo "Ajustando o diretório da aplicação para $FERRAMENTAS_DIR/${!APP_DIR}... "
        }

        # IMPORTANTE! 
        # As operações instala e remove são realizadas no diretório FERRAMENTAS_DIR
        echo -n "Mudando para o diretório $FERRAMENTAS_DIR... "
        mkdir -p "$FERRAMENTAS_DIR" && cd "$FERRAMENTAS_DIR" && ok || falha
    fi
}

# Função utilizada na instalação de uma aplicação
instala() {
    prepara "$@"

    # se a instalação é via yum, realiza e vai embora ou dá o erro...
    [ "$USA_YUM" ] && {
        echo "Instalando via yum ..."
        $SUDO yum -y install "${!APP_INSTALADOR}" || falha "Erro na execução do yum!"
        _instala
        return $?
    }

    # recupera os instaladores, caso possível
    recuperar_instaladores

    # cria diretórios necessários na execução do instala, caso não existam
    cria_dir INSTALADORES_DIR
    cria_dir FERRAMENTAS_DIR

    # verifica se informou o instalador
    verifica_var $APP_INSTALADOR

    # verifica se informou o diretório de instalação
    verifica_var $APP_DIR

    # baixa o instalador, caso necessário
    if [ "$BAIXA_ARQUIVO" ]; then
        if [ "${!APP_INSTALADOR_URL_COMPLETA}" ]; then
            baixa_arquivo --url "${!APP_INSTALADOR_URL_COMPLETA}" --arquivo "${!APP_INSTALADOR}" --url-completa
        else
            if [ "${!APP_INSTALADOR_URL}" ]; then
                baixa_arquivo --url "${!APP_INSTALADOR_URL}" --arquivo "${!APP_INSTALADOR}" 
            else
                verifica_var INSTALADORES_URL
                baixa_arquivo --url "$INSTALADORES_URL" --arquivo "${!APP_INSTALADOR}" 
            fi
        fi
    fi

    # se foi especificado um usuário para rodar a aplicação, cria-o caso ele não exista
    [ "${!APP_USUARIO}" ] && {
        grep -w "^${!APP_USUARIO}" /etc/passwd &> /dev/null || {
            echo -n "Criando o usuário ${!APP_USUARIO}... "
            useradd -m -s /bin/false ${!APP_USUARIO} &> $OUT && ok || falha
        }
    }
    _instala
}

# Função utilizada na remoção de uma aplicação
remove() {
    prepara "$@"

    [ "$USA_YUM" ] && {
        echo "Removendo via yum ..."
        _remove
        $SUDO yum -y remove ${!APP_INSTALADOR} || falha "Erro na execução do yum!"
        return $?
    }

    verifica_var FERRAMENTAS_DIR
    verifica_var $APP_DIR
    verifica_var $APP_LINK
    _remove
}

_instala() {
    [ "$TIPO_APP" ] && { 
        type verifica_opcs_$TIPO_APP &> $OUT && verifica_opcs_$TIPO_APP $INSTALA_OPCS
        if type instala_$TIPO_APP &> $OUT
        then 
            instala_$TIPO_APP || falha "Erro na execução de instala_$TIPO_APP!"
        else
            falha "Função instala_$TIPO_APP não encontrada!" 
        fi
    } || instala_aplicacao
}

_remove() {
    [ "$TIPO_APP" ] && { 
        type verifica_opcs_$TIPO_APP &> $OUT && verifica_opcs_$TIPO_APP $INSTALA_OPCS
        type remove_$TIPO_APP &> $OUT && remove_$TIPO_APP || falha "Função remove_$TIPO_APP não encontrada!" 
    } || remove_aplicacao
}

script=`basename "$0"`
case "$script" in
   instalar*)
      op=instala
      app=`echo -n ${script#instalar-}`
      ;;
   remover*)
      op=remove
      app=`echo -n ${script#remover-}`
      ;;
esac

case "$app" in
   instalar|remover) app="$1"; shift;;
esac

[ "$app" ] || falha "Applicação não informada!"
$op $app "$@"

# vim: set ts=4 sw=4 expandtab:
